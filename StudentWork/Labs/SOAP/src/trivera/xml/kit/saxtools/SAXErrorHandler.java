/**
 * Title:         SAXErrorHandler.java
 * <p>
 * This component and its source code representation are copyright protected
 * and proprietary to Trivera Technologies, LLC, Worldwide D/B/A Trivera Technologies
 *
 * This component and source code may be used for instructional and
 * evaluation purposes only. No part of this component or its source code
 * may be sold, transferred, or publicly posted, nor may it be used in a
 * commercial or production environment, without the express written consent
 * of Trivera Technologies, LLC
 *
 * Copyright (c) 2019 Trivera Technologies, LLC.
 * http://www.triveratech.com   
 * </p>
 * @author Trivera Technologies Tech Team.
 */

package trivera.xml.kit.saxtools;

import org.xml.sax.ErrorHandler;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import trivera.xml.kit.ui.trays.SAXTray;


/**
 * The SAXErrorHandler class is used to take care of errors encountered by a
 * SAX parser.  When error is called, the associated message is sent to the
 * SAXTray class.  Static methods in SAXTray is used to minimize trivial
 * string passing during training labs.
 *
 * @version  Training Course
 * @see DOMError
 */

public class SAXErrorHandler implements ErrorHandler {
/********************************************************************/
/*************************Variables**********************************/
/********************************************************************/


/********************************************************************/
/*************************Constructor**********************************/
/********************************************************************/

        public SAXErrorHandler() {

        }

/********************************************************************/
/*************************Methods**********************************/
/********************************************************************/


    /** Warning. */
    public void warning(SAXParseException ex) {
        SAXTray.handleParseError("[Warning] "+
                           getLocationString(ex)+": "+
                           ex.getMessage());
    }

    /** Error. */
    public void error(SAXParseException ex) {
      SAXTray.handleParseError(getLocationString(ex) +"\n"+
                           ex.getMessage() + "\n[Error]\n");
    }

    /** Fatal error. */
    public void fatalError(SAXParseException ex) throws SAXException {
        throw new SAXException(getLocationString(ex)+"\n"+
                           ex.getMessage() + "\n[Fatal Error]\n");
    }

  /**
  * Utility method that handles generating a pretty string holding the
  * location information from where the parser was in the file when the
  * associated error was generated.
  *
  * @parameter ex SAXParseException that was generated by the parser.
  * @return Returns a string contatining information about the location of thr
  * error.
  */
  private String getLocationString(SAXParseException ex) {
    StringBuffer str = new StringBuffer();

    String systemId = ex.getSystemId();
    if (systemId != null) {
      int index = systemId.lastIndexOf('/');
      if (index != -1)
        systemId = systemId.substring(index + 1);
        str.append(systemId);
      };
      str.append("\nLine: ");
      str.append(ex.getLineNumber());
      str.append("\nColumn: ");
      str.append(ex.getColumnNumber());

      return str.toString();
    }


}  // class SAXErrorHandler
